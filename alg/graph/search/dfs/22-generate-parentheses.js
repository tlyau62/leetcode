/**
 * problem: https://leetcode.com/problems/generate-parentheses/
 * 
 * mind flow:
 * 1. understand the pattern
 * 
 * n = 1:
 * ()
 *
 * n = 2:
 * ()
 * (()), ()()
 * 
 * n = 3:
 * ()
 * (()), ()()
 * ((())), (()()), (())(), ()()(), ()(()), ()()()
 * 
 * from n = 2, step 2 is generated by putting 1 '()' into and next to step 1 bracket '()'
 * from n = 3, step 3 is generated by putting 1 '()' into and next to most inner bracket '()' in step 2
 * 
 * 2. multiple answers, so each result is added at the leaf
 * 
 * 3. some answers is duplicated, so set can be used to remove them
 * 
 * @param {number} n
 * @return {string[]}
 */
var generateParenthesis = function (n) {
    const set = new Set();

    dfs(1, '()');

    return Array.from(set);

    function dfs(level, cur) {
        if (level >= n) {
            set.add(cur);
            return;
        }

        for (let i = 1; i < cur.length; i++) {
            if (cur[i - 1] === '(' && cur[i] === ')') {
                dfs(level + 1, cur.substring(0, i) + '()' + cur.substring(i, cur.length));
                dfs(level + 1, cur.substring(0, i + 1) + '()' + cur.substring(i + 1, cur.length));
            }
        }
    }
};