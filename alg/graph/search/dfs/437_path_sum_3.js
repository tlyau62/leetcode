/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {TreeNode} root
 * @param {number} sum
 * @return {number}
 */
var pathSum = function(root, sum) {
    
    // use dfs to build the root first
    // then do dfs again on each node, treat each of them as a subtree
    return dfsBuildTree(root);

    function dfsBuildTree(node) {
        
        if (node === null) {
            return 0;
        }
        
        return dfsCheckSum(node, sum)
            + dfsBuildTree(node.left)
            + dfsBuildTree(node.right);
        
    }
    
    function dfsCheckSum(node, target) {
        
        if (node === null) {
            return 0;
        }
           
        const diff = target - node.val;
        return ~~(node.val === target) +
            dfsCheckSum(node.left, diff) +
            dfsCheckSum(node.right, diff);
    
    }
    
};

// test case
// normal
// [10,5,-3,3,2,null,11,3,-2,null,1]
// 8

// 0 leaf node 
// [1,null,5,3,2,0,0,1,2]
// 8

// large case 1
// [68,73,55,58,9,75,0,14,2,65,86,93,49,91,37,32,98,51,23,15,92,46,18,40,62,12,85,36,99,5,16,64,82,60,87,35,63,67,80,72,20,21,69,24,26,81,7,42,97,33,54,94,95,27,78,45,10,96,43,53,71,3,4,76,79,1,31,17,90,8,6,59,52,11,48,100,39,22,19,25,50,30,66,61,83,89,84,38,41,56,57,29,88,34,28,13,74,44,70,47,-51,-74,-60,-68,-9,-18,-22,-94,-43,-40,-81,-36,-83,-23,-29,-17,-78,-14,-24,-8,-10,-35,-49,-4,-15,-85,-21,-53,-56,-20,-30,-82,-19,-65,-6,-92,-61,-16,-44,-28,-66,-62,-84,-45,-33,-27,-52,-75,-93,-39,-91,-100,-99,-73,-96,-42,-2,-32,-37,-70,-11,-31,-98,-5,-58,-86,-88,-13,-57,-50,-46,-71,-47,-72,-38,-77,-67,-63,-48,-12,-97,-69,-87,-34,-7,-3,-80,-26,-54,-25,-79,-55,-1,-64,-76,-95,-59,-89,-41,-90]
// 20

// large case 2
// [68,73,55,58,9,75,0,14,2,65,86,93,49,91,37,32,98,51,23,15,92,46,18,40,62,12,85,36,99,5,16,64,82,60,87,35,63,67,80,72,20,21,69,24,26,81,7,42,97,33,54,94,95,27,78,45,10,96,43,53,71,3,4,76,79,1,31,17,90,8,6,59,52,11,48,100,39,22,19,25,50,30,66,61,83,89,84,38,41,56,57,29,88,34,28,13,74,44,70,47,-51,-74,-60,-68,-9,-18,-22,-94,-43,-40,-81,-36,-83,-23,-29,-17,-78,-14,-24,-8,-10,-35,-49,-4,-15,-85,-21,-53,-56,-20,-30,-82,-19,-65,-6,-92,-61,-16,-44,-28,-66,-62,-84,-45,-33,-27,-52,-75,-93,-39,-91,-100,-99,-73,-96,-42,-2,-32,-37,-70,-11,-31,-98,-5,-58,-86,-88,-13,-57,-50,-46,-71,-47,-72,-38,-77,-67,-63,-48,-12,-97,-69,-87,-34,-7,-3,-80,-26,-54,-25,-79,-55,-1,-64,-76,-95,-59,-89,-41,-90]
// 30

// empty
// []
// 1

// 1 node tree
// [1]
// 1
// [1]
// 2